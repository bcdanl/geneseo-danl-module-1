---
title: Classwork 4
subtitle: Group Operations with GroupBy Objects [Classwork 4 may be subject to change during the Module.]
date: 2024-02-27
execute: 
  eval: false
  echo: false
  warning: false
  message: false
  
from: markdown+emoji
comments: false
---

```{r}
#| echo: false

reticulate::use_condaenv("/Users/bchoe/anaconda3", required = TRUE)
```



## Direction


<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/netflix.png" width="400px">
</p>


The `netflix-2019.csv` file (with its pathname `https://bcdanl.github.io/data/netflix-2019.csv`) contains a list of 6,000 titles that were available to watch in November 2019 on the video streaming service Netflix. It includes four variables: the video’s `title`, `director`, the date Netflix added it (`date_added`), and its `type` (category). 



<!-- <div style="position: relative;"> -->
<!--   <button onclick="scrollTable(-200)" style="position: absolute; z-index: 1000; top: 0; left: 70px; border: 1px solid grey; width: 25px; height: 40px; background-color: #ededed;">←</button> -->
<!--   <button onclick="scrollTable(200)" style="position: absolute; z-index: 1000; top: 0; left: 95px; border: 1px solid grey; width: 25px; height: 40px; background-color: #ededed;">→</button> -->
<!-- </div> -->


<script>
function scrollTable(offset) {
  // Ensure we're targeting the scroll body of the DataTable specifically
  var scrollBody = $('#exampleTable .dataTables_scrollBody');
  
  // Check if the scrollBody is found
  console.log(scrollBody.length); // For debugging, should be 1 if found
  
  scrollBody.animate({
    scrollLeft: '+=' + offset
  }, 'fast');
}
</script>


```{r}
#| eval: true
#| echo: false
DT:::datatable(readr::read_csv('https://bcdanl.github.io/data/netflix-2019.csv')
          )
```

<br><br>



## Question 1
Optimize the DataFrame for limited memory use and maximum utility by using the `astype()` method.

*Answer:*
```{python}

```

<br>



## Question 2
Find all observations with a title of "`Limitless`".

*Answer:*
```{python}

```

<br>



## Question 3
Find all observations with a director of "`Robert Rodriguez`" and a type of "`Movie`".

*Answer:*
```{python}

```

<br>



## Question 4
Find all observations with either a date_added of "`2019-07-31`" or a director of "`Robert Altman`".

*Answer:*
```{python}

```

<br>



## Question 5
Find all observations with a director of "`Orson Welles`", "`Aditya Kripalani`", or "`Sam Raimi`".

*Answer:*
```{python}

```

<br>



## Question 6
Find all observations with a `date_added` value between May 1, 2019 and June 1, 2019.

*Answer:*
```{python}

```

<br><br>



## Question 7
Drop all rows with a `NaN` value in the `director` variable.

*Answer:*
```{python}

```

<br><br>



## Question 8
Identify the days when Netflix added only one movie to its catalog.

*Answer:*
```{python}

```

<br><br>
