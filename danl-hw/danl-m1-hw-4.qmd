---
title: Homework 4
subtitle: Pandas Basics - Sorting and Filtering Data
date: 2024-02-27
execute: 
  echo: false
  eval: false
  warning: false
  message: false
from: markdown+emoji
comments: false
---

```{r}
#| include: false

library(tidyverse)
library(DT)

reticulate::use_condaenv("/Users/bchoe/anaconda3", required = TRUE)
```


# Direction


- Please submit your Jupyter Notebook for Homework 4 to the Brightspace with the name below:

  - `danl-m1-hw4-LASTNAME-FIRSTNAME.ipynb`\
  ( e.g., `danl-m1-hw4-choe-byeonghak.ipynb` )

- The due is March 5, 2024, 7:00 P.M.

- Please send Byeong-Hak an email (`bchoe@geneseo.edu`) if you have any questions.

-   Please prepare a Jupyter/Python Notebook (`*.ipynb`) to address all questions.

-   Make at least some simple comment (`# ...`) in each question.

-   Make one text cell to explain things in each question.

<br>

# Load Libraries

Import the `pandas` library.

```{python}
#| echo: true
import pandas as pd
```


<br>

# Part 1

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/nyc-payroll.png" width="600px">
</p>

<br>

Below is `nyc_payroll` `DataFrame` that reads the file `nyc_payroll.csv` containing data of how the New York City’s budget is being spent on salary and overtime pay for all municipal employees (Source: [NYC OpenData](https://data.cityofnewyork.us/City-Government/Citywide-Payroll-Data-Fiscal-Year-/k397-673e/about_data)).

```{python}
#| echo: true
nyc_payroll = pd.read_csv('https://bcdanl.github.io/data/nyc_payroll_2022_2023.csv')
```

<div style="position: relative;">
  <button onclick="scrollTable(-200)" style="position: absolute; z-index: 1000; top: 0; left: 70px; border: 1px solid grey; width: 25px; height: 41px; background-color: #ededed;">←</button>
  <button onclick="scrollTable(200)" style="position: absolute; z-index: 1000; top: 0; left: 95px; border: 1px solid grey; width: 25px; height: 41px; background-color: #ededed;">→</button>
</div>


<script>
function scrollTable(offset) {
  // Ensure we're targeting the scroll body of the DataTable specifically
  var scrollBody = $('#exampleTable .dataTables_scrollBody');
  
  // Check if the scrollBody is found
  console.log(scrollBody.length); // For debugging, should be 1 if found
  
  scrollBody.animate({
    scrollLeft: '+=' + offset
  }, 'fast');
}
</script>


```{r}
#| eval: true
#| echo: false
DT:::datatable(readr::read_csv('https://bcdanl.github.io/data/nyc_payroll_2022_2023.csv'), 
          extensions = c('Buttons','FixedColumns'),
          options = list(
            dom = 'Bfrtip',
            buttons = c('csv'),
            scrollX = TRUE,
            fixedColumns = list(leftColumns = 2)
            ), 
          elementId = "exampleTable"
          )
```

## Variable Description
- `Fiscal Year`: Fiscal Year;
- `Payroll Number`:	Payroll Number;
- `Agency Name`: The Payroll agency that the employee works for;
- `Last Name`: Last name of employee;
- `First Name`: First name of employee;
- `Mid Init`: Middle initial of employee;
- `Agency Start Date`: Date which employee began working for their current agency;
- `Work Location Borough`: Borough of employee's primary work location;
- `Title Description`: Civil service title description of the employee;
- `Leave Status as of June 30`: Status of employee as of the close of the relevant fiscal year;
- `Base Salary`: Base Salary assigned to the employee;
- `Pay Basis`: Lists whether the employee is paid on an hourly, per diem or annual basis;
- `Regular Hours`: Number of regular hours employee worked in the fiscal year;
- `Regular Gross Paid`: The amount paid to the employee for base salary during the fiscal year;
- `OT Hours`: Overtime Hours worked by employee in the fiscal year;
- `Total OT Paid`: Total overtime pay paid to the employee in the fiscal year;
- `Total Other Pay`: Includes any compensation in addition to gross salary and overtime pay, ie Differentials, lump sums, uniform allowance, meal allowance, retroactive pay increases, settlement amounts, and bonus pay, if applicable.
<br><br>

## Question 1

- How many employees have a "Base Salary" within the top 10% of the DataFrame?
  - Hint: The `.quantile()` method can be useful.


*Answer*
```{python}

```

<br><br>

<br><br>


## Question 2
Filter the DataFrame for employees who have "OT Hours" greater than 0 but less than 100, and their "Leave Status as of June 30" is "ACTIVE".


*Answer*
```{python}

```

<br><br>




## Question 3
Find the unique job titles in the "DEPARTMENT OF EDUCATION ADMIN" agency and count how many there are.


*Answer*
```{python}

```

<br><br>


## Question 4
- Identify the employee(s) with the highest "Total OT Paid" in the DataFrame. 
  - Include their "First Name", "Last Name", and "Total OT Paid".


*Answer*
```{python}

```

<br><br><br>

# Part 2

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/spotify.png" width="400px">
</p>

<br>

Below is `spotify` `DataFrame` that reads the file `spotify_all.csv` containing data of Spotify users' playlist information (Source: [Spotify Million Playlist Dataset Challenge](https://www.aicrowd.com/challenges/spotify-million-playlist-dataset-challenge)).

```{python}
#| echo: true
spotify = pd.read_csv('https://bcdanl.github.io/data/spotify_all.csv')
```


```{r}
#| eval: true
#| echo: false

rm(list =ls())
rmarkdown::paged_table(readr::read_csv('https://bcdanl.github.io/data/spotify_all.csv'),
                       options = list(rows.print = 25))
```

<br>

## Variable Description

- `pid`: playlist ID; unique ID for playlist

- `playlist_name`: a name of playlist

- `pos`: a position of the track within a playlist (starting from 0)

- `artist_name`: name of the track’s primary artist

- `track_name`: name of the track

- `duration_ms`: duration of the track in milliseconds

- `album_name`: name of the track’s album

<br>

## Question 5

- Find the five most popular song.
  - A value of a song is defined as a combination of a `artist_name` value and a `track_name` value.
  - Who are artists for those five most popular song?
  


*Answer*
```{python}

```

<br><br>




## Question 6
- Create a DataFrame that only contains observations from playlists featuring the song "One Dance" by Drake.
  - Next, identify the song with the highest popularity after Drake's "One Dance" in the newly created DataFrame.


*Answer*
```{python}

```

<br><br>


