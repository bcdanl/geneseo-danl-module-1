---
title: Lecture 1
subtitle: Syllabus, Course Outline, Python Basics
format:
  clean-revealjs:
    execute: 
      eval: false
      echo: true
    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2023-02-06
execute: 
  eval: false
  echo: true
callout-icon: false
# bibliography: refs.bib
# include-after-body: backwards.html
---


```{r setup}
#| include: false
#| eval: true

library(knitr)
library(tidyverse)
# set default options
opts_chunk$set(echo = FALSE,
               fig.width = 7.252,
               fig.height = 4,
               comment = "#",
               dpi = 300)

knitr::knit_engines$set("markdown")
```


# Instructor {background-color="#1c4982"}

## Instructor
### Current Appointment & Education

- Name: Byeong-Hak Choe.
- Assistant Professor of Data Analytics and Economics, School of Business at SUNY Geneseo.


- Ph.D. in Economics from University of Wyoming.
- M.S. in Economics from Arizona State University.
- M.A. in Economics from SUNY Stony Brook.
- B.A. in Economics & B.S. in Applied Mathematics from Hanyang University at Ansan, South Korea.
  - Minor in Business Administration.
  - Concentration in Finance.
  


## Instructor
### Data Science and Climate Change

- Choe, B.H., 2021. "Social Media Campaigns, Lobbying and Legislation: Evidence from #climatechange/#globalwarming and Energy Lobbies."

- Question: To what extent do social media campaigns compete with fossil fuel lobbying on climate change legislation?

- Data include:
  - 5.0 million tweets with #climatechange/#globalwarming around the globe;
  - 12.0 million retweets/likes to those tweets;
  - 0.8 million Twitter users who wrote those tweets;
  - 1.4 million Twitter users who retweeted or liked those tweets;
  - 0.3 million US Twitter users with their location at a city level;
  - Firm-level lobbying data (expenses, targeted bills, etc.). 



# Syllabus {background-color="#1c4982"}

## Syllabus

### Email, Class & Office Hours

- Email: [bchoe@geneseo.edu](bchoe@geneseo.edu)


- Class Homepage: 
  i. [https://brightspace.geneseo.edu/](https://brightspace.geneseo.edu/)
  i. [http://bcdanl.github.io/module-1/](http://bcdanl.github.io/module-1/)
  
  
- Office: South Hall 301
- Office Hours: 
  - By appointment via email



## Syllabus

### Course Description

- This course aims to provide overview of how one can collect, manipulate, process, clean, and crunch datasets with practical case studies.

- This course will cover topics such as (1) loading, slicing, filtering, transforming, reshaping, and merging data, (2)  summarizing and visualizing data, and (3) exploratory data analysis.

- We will cover these topics to solve real-world data analysis problems with thorough, detailed examples. 



## Syllabus

### Course Requirements

- Laptop: You should bring your own laptop (**Mac** or **Windows**) to the classroom. 
  - It is recommended to have 2+ core CPU, 4+ GB RAM, and 500+ GB disk storage in your laptop for this course.
  
- Homework: There will be six homework assignments.

- Exams: There will be one take-home exam. 


## Syllabus
### Course Contents

- There will be tentatively 28 class sessions:
  - 7 lectures
  - 1 take-home exam




## Syllabus
### Course Contents

```{r, out.width='100%', fig.align='center'}
#| eval: true
#| echo: false
text_tbl <- data.frame(
  Week = c("1", "2", "3", "4", "5", "6", "7"),
  Contents = c("Syllabus, Python & Pandas Basics",
"The Series object and Series methods",
"The DataFrame object and filtering DataFrame",
"The GroupBy object",
"Reshaping and pivoting",
"Merging, joining, and concatenating",
"Python data visualization and course wrap-up"),
  `HW Exam` = c("HW 1", "HW 2", "HW 3", "HW 4", "HW 5", "HW 6", "Take-home Exam")
  )


# Create a DT datatable without search box and 'Show entries' dropdown
DT::datatable(text_tbl, rownames = FALSE,
              options = list(
  dom = 't', # This sets the DOM layout without the search box ('f') and 'Show entries' dropdown ('l')
  paging = FALSE, # Disable pagination
  columnDefs = list(list(
    targets = "_all", # Applies to all columns
    orderable = FALSE # Disables sorting
  ))
), callback = htmlwidgets::JS("
  // Change header background and text color
  $('thead th').css('background-color', '#1c4982');
  $('thead th').css('color', 'white');

  // Loop through each row and alternate background color
  $('tbody tr').each(function(index) {
    if (index % 2 == 0) {
      $(this).css('background-color', '#d1dae6'); // Light color for even rows
    } else {
      $(this).css('background-color', '#9fb2cb'); // Dark color for odd rows
    }
  });

  // Set text color for all rows
  $('tbody tr').css('color', 'black');

  // Add hover effect
  $('tbody tr').hover(
    function() {
      $(this).css('background-color', '#607fa7'); // Color when mouse hovers over a row
    }, 
    function() {
      var index = $(this).index();
      if (index % 2 == 0) {
        $(this).css('background-color', '#d1dae6'); // Restore even row color
      } else {
        $(this).css('background-color', '#9fb2cb'); // Restore odd row color
      }
    }
  );
")
)

```




## Syllabus
### Assessments
- Each of the six homework assignments accounts for 10\% of the total percentage grade. 
- The exam account for 30\% of the total percentage grade. 
- Participation in discussions accounts for 10\% of the total percentage grade.

$$
\begin{align}
(\text{Total Percentage Grade}) =\quad\, &0.60\times(\text{Total Homework Score})\notag\\
\,+\, &0.30\times(\text{Take-Home Exam Score})\notag\\
\,+\, &0.10\times(\text{Total Discussion Score})\notag
\end{align}
$$



# GitHub and Google Colab {background-color="#1c4982"}

## What is GitHub?
- [https://github.com/](https://github.com/) is a platform for storing, managing, and sharing code. 

- Course contents will be posted not only Brightspace but also our GitHub repositories ("repos").

- Online discussion and Q & A will be hosted on GitHub repository.

- Clicking "Sign Up" or [https://github.com/signup](https://github.com/signup) will direct you to the sign up page.



## Getting a GitHub account

- Github is useful for many reasons, but the main reason is how user friendly it makes uploading and sharing code.

- Sharing and editing code for a large group is easy with Github

- It also automatically maintains a history of all changes to the repo. 
You can see the history of committed changes, and even go into detail about what those changes entailed. 
- You can also revert to old versions of your repo, and all edits will be saved in this history.


## What is Google Colab
- [https://colab.research.google.com/](https://colab.research.google.com/) is analogous to Google Drive, but specifically for writing and
executing Python code in your browser.
  - The base Colab link listed above leads to a Python notebook introducing Colab and how to use it.

- This video also helps get started with Colab if you are unfamiliar with the format!
  - [https://www.youtube.com/watch?v=inN8seMm7UI](https://www.youtube.com/watch?v=inN8seMm7UI)


## Why use Colab?
- A key benefit of Colab is that it is entirely free to use and has many of the standard Python modules pre installed. 
  - It allows for CPU or GPU usage, even for free users, and stores the files in Google’s servers so you can access your files from anywhere you can connect to the Internet.
  
- Using Colab also means you can entirely avoid the process of installing Python and any dependencies onto your computer.

- Colab notebooks don’t just contain Python code. They can contain text, images, and HTML!

- Ultimately, they're intuitive to use and let you jump right into the code and data analysis without needing to worry about the more cumbersome details needed to run Python notebooks on a personal computer.


## Colab has GitHub integration!

- Let's walk through the GitHub integration and look at how to use Colab with the first notebook for this course.




# Python Basics {background-color="#1c4982"}

## Python Basics
### Objectives
- In this Section, we will discuss the basics of objects, types, operations, and imports. 

These are the basic building blocks of almost all programming languages and will serve you well for your coding journey.


- Everything is an __object__, and every _object_ has a __type__.


##  Python Basics
### Variables Are Names, Not Places

- The most basic built-in data types that you’ll need to know about are: **integers** 10, **floats** 1.23, **strings** like this, **booleans** True, and **nothing** None.

- Python also has a built-in type called a **list** [10, 15, 20] that can *contain* anything, even different **types** 

```{.python}
list_example = [10, 1.23, "like this", True, None]
print(list_example)
type(list_example)
```





##  Python Basics
### Types

:::: {.columns}
::: {.column width="50%"}
```{r}
#| eval: true
#| out-width: "100%"
#| fig-align: 'center'
#| fig-cap: "Python’s basic data types"

knitr::include_graphics("lec_figs/int-py-tab2-1.png")
```
:::

::: {.column width="50%"}
- The second column (Type) contains the Python name of that type. 

- The third column (Mutable?) indicates whether the value can be changed after creation.
:::
::::




##  Python Basics
### Brackets

- There are several kinds of brackets in Python, including `[]`, `{}`, and `()`. 


::: {.panel-tabset}

## `[]`
- `[]` is used to denote a **list** or to signify accessing a *position* using an index.

```{.python}
vector = ['a', 'b']
vector[0]
```





## `{}`
- `{}` is used to denote a **set** or a **dictionary** (with key-value pairs).

```{.python}
{'a', 'b'}
{'first_letter': 'a', 'second_letter': 'b'}
```




## `()`
- `()` is used to denote a **tuple**, or the *arguments* to a *function*, e.g., function(x)  where x is the input passed to the function, or to indicate the order operations are carried out.

```{.python}
num_tup = (1, 2, 3)
sum(num_tup)
```



:::



##  Python Basics
### Lists and Slicing

- Lists are a really useful way to work with lots of data at once. 
  - We can also construct them by appending entries:

```{.python}
list_example = [10, 1.23, "like this", True, None]
list_example.append("one more entry")
print(list_example)
```

- We can access earlier entries using an *index*, which begins at 0 and ends at one less than the length of the list.

```{.python}
print(list_example[0])
print(list_example[-1])
```




##  Python Basics
### Lists and Slicing

- Slicing can be even more elaborate than that because we can jump entries using a second colon. 

```{.python}
# range() produces a list of integers from the value to one less than the last
list_of_numbers = list(range(1, 11))
start = 1
stop = -1
step = 2
print(list_of_numbers[ start : stop : step ])
```




##  Python Basics
### Operators

- All of the basic operators you see in mathematics are available to use: `+` for addition, `-` for subtraction, `*` for multiplication, `**` for powers, `/` for division, `//` for integer division, and `%` for modulo.

  i. These work as you’d expect on numbers. 
  i. These operators are sometimes defined for other built-in data types too. 
    - We can ‘sum’ strings (which really concatenates them):

```{.python}
string_one = "This is an example "
string_two = "of string concatenation"
string_full = string_one + string_two
print(string_full)
```



##  Python Basics
### Operators

:::: {.columns}
::: {.column width="50%"}
- It works for lists too:

```{.python}
list_one = ["apples", "oranges"]
list_two = ["pears", "satsumas"]
list_full = list_one + list_two
print(list_full)
```

:::

::: {.column width="50%"}
- We can multiply strings!

```{.python}
string = "apples, "
print(string * 3)
```

:::
::::



##  Python Basics
### Operators

- We can combine the arithmetic operators with assignment by putting the operator before the `=`.

:::: {.columns}
::: {.column width="50%"}
- `x += 1` is equivalent to `x = x + 1`.
```{.python}
x = 3
x += 1
```
:::

::: {.column width="50%"}
- `a -= 2` is equivalent to `a = a - 2`.
```{.python}
a = 2
a -= 2
```
:::
:::: 



##  Python Basics
### Operators

**Q**. Using Python operations only, what is
$$\frac{2^5}{7 \cdot (4 - 2^3)} \quad\text{?}$$ 






##  Python Basics
### Strings

- From strings, we can access the individual characters via slicing and indexing. 


```{.python}
string = "cheesecake"
print( string[-4:] )
```


- Both lists and strings will allow us to use the `len()` command to get their length:

:::: {.columns}
::: {.column width="50%"}
- `x += 1` is equivalent to `x = x + 1`.
```{.python}
string = "cheesecake"
print( "String has length:" )
print( len(string) )
```
:::

::: {.column width="50%"}
- `a -= 2` is equivalent to `a = a - 2`.
```{.python}
list_of_numbers = range(1, 20)
print( "List of numbers has length:" )
print( len(list_of_numbers) )
```
:::
::::




##  Python Basics
### Booleans and Conditions

- Boolean data have either `True` or `False` value.


- There are two types of operation that are associated with booleans: boolean operations.
  - Existing booleans are combined, and condition operations, which create a boolean when executed.



```{r, out.width='100%', fig.align='center'}
text_tbl <- data.frame(
  Operator = c("x and y", "x or y", "not x"),
  Description = c("Are x and y both True?",
"Is at least one of x and y True?",
"Is x False?")
  )

DT::datatable(text_tbl, rownames = FALSE,
              options = list(
  dom = 't', # This sets the DOM layout without the search box ('f') and 'Show entries' dropdown ('l')
  paging = FALSE, # Disable pagination
  columnDefs = list(list(
    targets = "_all", # Applies to all columns
    orderable = FALSE # Disables sorting
  ))
), callback = htmlwidgets::JS("
  // Change header background and text color
  $('thead th').css('background-color', '#1c4982');
  $('thead th').css('color', 'white');

  // Loop through each row and alternate background color
  $('tbody tr').each(function(index) {
    if (index % 2 == 0) {
      $(this).css('background-color', '#d1dae6'); // Light color for even rows
    } else {
      $(this).css('background-color', '#9fb2cb'); // Dark color for odd rows
    }
  });

  // Set text color for all rows
  $('tbody tr').css('color', 'black');

  // Add hover effect
  $('tbody tr').hover(
    function() {
      $(this).css('background-color', '#607fa7'); // Color when mouse hovers over a row
    }, 
    function() {
      var index = $(this).index();
      if (index % 2 == 0) {
        $(this).css('background-color', '#d1dae6'); // Restore even row color
      } else {
        $(this).css('background-color', '#9fb2cb'); // Restore odd row color
      }
    }
  );
")
)


```



##  Python Basics
### Booleans and Conditions

Conditions are expressions that evaluate as booleans. 

```{r, out.width='100%', fig.align='center'}
text_tbl <- data.frame(
  Operator = c("x == y", "x != y", "x > y", "x >= y", "x < y", "x <= y", "x is y"),
  Description = c("Is x equal to y?",
"Is x greater than y?",
"Is x greater than or equal to y?",
"Is x greater than or equal to y?",
"Is x less than y?",
"Is x less than or equal to y?",
"Is x the same object as y?" )
)



DT::datatable(text_tbl, rownames = FALSE,
              options = list(
  dom = 't', # This sets the DOM layout without the search box ('f') and 'Show entries' dropdown ('l')
  paging = FALSE, # Disable pagination
  columnDefs = list(list(
    targets = "_all", # Applies to all columns
    orderable = FALSE # Disables sorting
  ))
), callback = htmlwidgets::JS("
  // Change header background and text color
  $('thead th').css('background-color', '#1c4982');
  $('thead th').css('color', 'white');

  // Loop through each row and alternate background color
  $('tbody tr').each(function(index) {
    if (index % 2 == 0) {
      $(this).css('background-color', '#d1dae6'); // Light color for even rows
    } else {
      $(this).css('background-color', '#9fb2cb'); // Dark color for odd rows
    }
  });

  // Set text color for all rows
  $('tbody tr').css('color', 'black');

  // Add hover effect
  $('tbody tr').hover(
    function() {
      $(this).css('background-color', '#607fa7'); // Color when mouse hovers over a row
    }, 
    function() {
      var index = $(this).index();
      if (index % 2 == 0) {
        $(this).css('background-color', '#d1dae6'); // Restore even row color
      } else {
        $(this).css('background-color', '#9fb2cb'); // Restore odd row color
      }
    }
  );
")
)

```



##  Python Basics
### Booleans and Conditions

- The `==` is an operator that compares the objects on either side and returns `True` if they have the same values

```{.python}
boolean_condition1 = 10 == 20
print(boolean_condition1)

boolean_condition2 = 10 == '10'
print(boolean_condition2)
```

**Q**. What does `not (not True)` evaluate to?





##  Python Basics
### Booleans and Conditions

- The real power of conditions comes when we start to use them in more complex examples, such as `if` statements.


```{.python}
name = "Geneseo"
score = 99

if name == "Geneseo" and score > 90:
    print("Geneseo, you achieved a high score.")

if name == "Geneseo" or score > 90:
    print("You could be called Geneseo or have a high score")

if name != "Geneseo" and score > 90:
    print("You are not called Geneseo and you have a high score")
```



##  Python Basics
### Booleans and Conditions

- Given that `==` and `!=` test for equality and not equal, respectively, you may be wondering what the keyword `is`  is for.
  - Remember that everything in Python is an object, and that values can be assigned to objects.
  - `==` and `!=` compare values, while `is` compare objects.

:::: {.columns}
::: {.column width="50%"}
```{.python}
name_list = ["Ada", "Adam"]
name_list_two = ["Ada", "Adam"]
```
:::

::: {.column width="50%"}
```{.python}
# Compare values
print(name_list == name_list_two)

# Compare objects
print(name_list is name_list_two)
```
:::
::::



##  Python Basics
### Booleans and Conditions

- One of the most useful conditional keywords is `in`. 
  - This one must pop up ten times a day in most coders’ lives because it can pick out a variable or make sure something is where it’s supposed to be.


```{.python}
name_list = ["Lovelace", "Smith", "Hopper", "Babbage"]

print("Lovelace" in name_list)

print("Bob" in name_list)
```

**Q**. Check if “a” is in the string “Sun Devil Arena” using `in`. Is “a” in “Anyone”?




##  Python Basics
### Booleans and Conditions

- One conditional construct we're bound to use at some point, is the `if-else` chain:

```{.python}
score = 98

if score == 100:
    print("Top marks!")
elif score > 90 and score < 100:
    print("High score!")
elif score > 10 and score <= 90:
    pass
else:
    print("Better luck next time.")
```




##  Python Basics
### Booleans and Conditions


**Q**. Create a new `if-else` chain that prints “well done” if a score is over 90, “good” if between 40 and 90, and “bad luck” otherwise.






##  Python Basics
### Booleans and Conditions


- We can make multiple assignment or multiple boolean comparisons in a single line.


```{.python}
a, b = 3, 6

1 < a < b < 20
```






<script>
document.addEventListener('wheel', function(event) {
    if (event.deltaY > 0) {
        Reveal.next(); // Scroll down to go to the next slide
    } else {
        Reveal.prev(); // Scroll up to go to the previous slide
    }
}, false);
</script>