---
title: Lecture 1
subtitle: Syllabus, Course Outline, Python Basics [Lecture 1 slides may be subject to change during the Module.]
format:
  clean-revealjs:
    self-contained: true
    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2024-02-06
execute: 
  eval: false
  echo: true
callout-icon: false
# bibliography: refs.bib
# include-after-body: backwards.html
---


```{r setup}
#| include: false
#| eval: true

library(knitr)
library(tidyverse)
# set default options
opts_chunk$set(echo = FALSE,
               fig.width = 7.252,
               fig.height = 4,
               comment = "#",
               dpi = 300)

knitr::knit_engines$set("markdown")
```


# Instructor {background-color="#1c4982"}

## Instructor
### Current Appointment & Education

- Name: Byeong-Hak Choe.
- Assistant Professor of Data Analytics and Economics, School of Business at SUNY Geneseo.


- Ph.D. in Economics from University of Wyoming.
- M.S. in Economics from Arizona State University.
- M.A. in Economics from SUNY Stony Brook.
- B.A. in Economics & B.S. in Applied Mathematics from Hanyang University at Ansan, South Korea.
  - Minor in Business Administration.
  - Concentration in Finance.
  


## Instructor
### Economics, Data Science, and Climate Change

- I consider myself an applied economist specializing in environmental economics, with a specific emphasis on climate change. 

- My methodological approach involves leveraging causal inference, econometrics, machine learning methods, and various data science tools for conducting empirical analyses.

- Choe, B.H., 2021. "Social Media Campaigns, Lobbying and Legislation: Evidence from #climatechange/#globalwarming and Energy Lobbies."

- Choe, B.H. and Ore-Monago, T., 2024. "Governance and Climate Finance in the Developing World"


# Syllabus {background-color="#1c4982"}

## Syllabus

### Email, Class & Office Hours

- Email: [bchoe@geneseo.edu](bchoe@geneseo.edu)


- Class Homepage: 
  i. [https://brightspace.geneseo.edu/](https://brightspace.geneseo.edu/)
  i. [http://bcdanl.github.io/module-1/](http://bcdanl.github.io/module-1/)
  
  
- Office: South Hall 301
- Office Hours: 
  - By appointment via email



## Syllabus

### Course Description

- This course aims to provide overview of how one can process, clean, and crunch datasets with practical case studies.

- Key topics include: 
  1. loading, slicing, filtering, transforming, reshaping, and merging data
  2. summarizing and visualizing data,
  3. exploratory data analysis.

- We will cover these topics to solve real-world data analysis problems with thorough, detailed examples. 



## Syllabus
### Reference Materials

- [**Python for Data Analysis** (3rd Edition)](https://wesmckinney.com/book){target="_blank"} by [Wes McKinney](https://wesmckinney.com/){target="_blank"}

- [Guide for Quarto](https://quarto.org/docs/guide){target="_blank"}

- [Python Programming for Data Science](https://www.tomasbeuzen.com/python-programming-for-data-science){target="_blank"} by Tomas Beuzen

- [Coding for Economists](https://aeturrell.github.io/coding-for-economists){target="_blank"} by Arthur Turrell 

- [Python for Econometrics in Economics](https://pyecon.org/lecture/}{https://pyecon.org/lecture/){target="_blank"} by Fabian H. C. Raters

- [QuantEcon DataScience - Python Fundamentals](https://datascience.quantecon.org/python_fundamentals/index.html){target="_blank"} by Chase Coleman, Spencer Lyon, and Jesse Perla

- [QuantEcon DataScience - pandas](https://datascience.quantecon.org/pandas/index.html){target="_blank"} by Chase Coleman, Spencer Lyon, and Jesse Perla




## Syllabus

### Course Requirements

- Laptop: You should bring your own laptop (**Mac** or **Windows**) to the classroom. 
  - It is recommended to have 2+ core CPU, 4+ GB RAM, and 500+ GB disk storage in your laptop for this course.
  
- **Homework**: There will be six homework assignments.

- **Exam**: There will be one take-home exam. 

- **Discussions**: You are encouraged to participate in GitHub-based online discussions for each lecture, classwork, and homework.
  - Checkout the netiquette policy in the syllabus.
  


## Syllabus
### Course Schedule and Contents
- There will be tentatively 7 class sessions.

```{r, out.width='100%', fig.align='center'}
#| eval: true
#| echo: false
text_tbl <- data.frame(
  Week = c("1", "2", "3", "4", "5", "6", "7"),
  Contents = c("Syllabus, Python & Pandas Basics",
"The Series object and Series methods",
"The DataFrame object and filtering DataFrame",
"The GroupBy object",
"Reshaping and pivoting",
"Merging, joining, and concatenating",
"Python data visualization and course wrap-up"),
  `HW Exam` = c("HW 1", "HW 2", "HW 3", "HW 4", "HW 5", "HW 6", "Take-home Exam")
  )


# Create a DT datatable without search box and 'Show entries' dropdown
DT::datatable(text_tbl, rownames = FALSE,
              options = list(
  dom = 't', # This sets the DOM layout without the search box ('f') and 'Show entries' dropdown ('l')
  paging = FALSE, # Disable pagination
  columnDefs = list(list(
    targets = "_all", # Applies to all columns
    orderable = FALSE # Disables sorting
  ))
), callback = htmlwidgets::JS("
  // Change header background and text color
  $('thead th').css('background-color', '#1c4982');
  $('thead th').css('color', 'white');

  // Loop through each row and alternate background color
  $('tbody tr').each(function(index) {
    if (index % 2 == 0) {
      $(this).css('background-color', '#d1dae6'); // Light color for even rows
    } else {
      $(this).css('background-color', '#9fb2cb'); // Dark color for odd rows
    }
  });

  // Set text color for all rows
  $('tbody tr').css('color', 'black');

  // Add hover effect
  $('tbody tr').hover(
    function() {
      $(this).css('background-color', '#607fa7'); // Color when mouse hovers over a row
    }, 
    function() {
      var index = $(this).index();
      if (index % 2 == 0) {
        $(this).css('background-color', '#d1dae6'); // Restore even row color
      } else {
        $(this).css('background-color', '#9fb2cb'); // Restore odd row color
      }
    }
  );
")
)

```




## Syllabus
### Assessments
- Each of the six homework assignments accounts for 10% of the total percentage grade. 
- The exam account for 30% of the total percentage grade. 
- Participation in discussions accounts for 10% of the total percentage grade.

$$
\begin{align}
(\text{Total Percentage Grade}) =\quad\, &0.60\times(\text{Total Homework Score})\notag\\
\,+\, &0.30\times(\text{Take-Home Exam Score})\notag\\
\,+\, &0.10\times(\text{Total Discussion Score})\notag
\end{align}
$$

# Prologue {background-color="#1c4982"}


## Why Data Analytics?

::: {.incremental}

- Fill in the gaps left by traditional business and economics classes.
  - Practical skills that will benefit your future career.
  - Neglected skills like how to actually find datasets in the wild and clean them.

- Data analytics skills are largely distinct from (and complementary to) the core quantitative works familiar to business undergrads.
  - Data visualization, cleaning and wrangling; databases; machine learning; etc.

- In short, we will cover things that I wish someone had taught me when I was undergraduate.

:::

## You, at the end of this course

<p align="center">
  <img src="lec_figs/yes-that-s-awesome.jpeg">
</p>




## Why Data Analytics?

- **Data analysts** use analytical tools and techniques to extract meaningful insights from data.
  - Skills in data analytics are also useful for **business analysts** or **market analysts**.


- [Breau of Labor Statistics](https://www.bls.gov/ooh/math/data-scientists.htm){target="_blank"} forecasts that the projected growth rate of the employment in the industry related to data analytics from 2021 to 2031 is **36%**. 
  - The average growth rate for all occupations is **5%**.



## Why Personal Website?
### Benefits of a Personal Website in Data Analytics

:::{}
- Here are the example websites:
  - [Byeong-Hak's Website](https://bcecon.github.io){target="_blank"}
  - [DANL Website Template](https://bcdanl.github.io/danl-website-template){target="_blank"}
:::

:::{.incremental}
- **Professional Showcase**: Display skills and projects
- **Visibility and Networking**: Increase online presence
- **Controlled Narrative**: Manage your professional brand
- **Content Sharing and Engagement**: Publish articles, insights
- **Job Opportunities**: Attract potential employers and clients
- **Long-term Asset**: A growing repository of your career journey
- **Reproducible Research**: Showcase data-driven reports
:::



## Why Python, R, and Databases?

![](https://bcdanl.github.io/lec_figs/indeed-py-r-sql.png)

## Why Python, R, and Databases?

- [Stack Overflow](https://stackoverflow.com){target="_blank"}  is the most popular Q & A website specifically for programmers and software developers in the world.

- See how programming languages have trended over time based on use of their tags in Stack Overflow from 2008 to 2022.


:::: {.columns}

::: {.column width="50%"}
### Most Popular Languagues

![](https://bcdanl.github.io/lec_figs/stackoverflow-py-r-sql.png)
:::


::: {.column width="50%"}
### Data Science and Big Data

![](https://bcdanl.github.io/lec_figs/stackoverflow-datascience-r-sql.png)

:::

:::: 





## The State of the Art
### Generative AI and ChatGPT


:::: {.columns }

::: {.column width="50%"}
### Data Science and Big Data Trend

From 2008 to 2023
 
![](https://bcdanl.github.io/lec_figs/stackoverflow-datascience-r-sql-2024.png)

:::


::: {.column width="50%"}

### Programmers in 2024

![](https://bcdanl.github.io/lec_figs/chatgpt-stackoverflow-meme.jpg)
:::


::::








## The State of the Art
### Generative AI and ChatGPT

- **Generative AI** refers to a category of artificial intelligence (AI) that is capable of generating new content, ranging from text, images, and videos to music and code. 

:::{.incremental}

- In the early 2020s, advances in transformer-based deep neural networks enabled a number of generative AI systems notable for accepting natural language prompts as input.
  - These include large language model (LLM) chatbots such as ChatGPT, Copilot, Bard, and LLaMA.

- **ChatGPT** (Chat Generative Pre-trained Transformer) is a chatbot developed by OpenAI and launched on November 30, 2022. 
  - By January 2023, it had become what was then the fastest-growing consumer software application in history.

:::



## The State of the Art
### Generative AI and ChatGPT

  
- Users around the world have explored how to best utilize GPT for writing essays and programming codes.


::::{.incremental}

:::{}
- Is AI a threat to data analytics?
  - Fundamental understanding of the subject matter is still crucial for effectively utilizing AI's capabilities.
:::

:::{}
- If you use Generative AI such as ChatGPT, please try to understand what ChatGPT gives you.
  - Copying and pasting it without any understanding harms your learning opportunity.
:::

::::


# DANL Tools {background-color="#1c4982"}


## What is Git?

:::: {.columns}

::: {.column width="45%"}
![](https://bcdanl.github.io/lec_figs/git-version.png)
:::

::: {.column width="55%"}

$\quad$

- **Git** is the most popular **version control** tool for any software development.
  - It tracks changes in a series of snapshots of the project, allowing developers to revert to previous versions, compare changes, and merge different versions.
  - It is the industry standard and ubiquitous for coding collaboration.

:::

::::

## What is Git?

:::: {.columns}

::: {.column width="40%"}
![](https://bcdanl.github.io/lec_figs/git-simple.png)

:::

::: {.column width="60%"}

```{.bash}
git add .
git commit -m "any message is here"
git push -u origin main
```

$\quad$


::: {.incremental}
- Git operates primarily through command-line tools (e.g., **Terminal**) and is local to a user's computer.

  - It has a steep learning curve.

  
- We will not do *git collaboration* but use only the 3-step git commands on Terminal to update a website.

:::
:::

:::: 


## What is GitHub?

- [GitHub](https://github.com/){target="_blank"} is a web-based hosting platform for Git repositories to store, manage, and share code. 

::: {.incremental}

- Your personal website will be hosted on a GitHub repository.

- Course contents will be posted not only in Brightspace but also in our GitHub repositories ("repos") and websites.

- Github is useful for many reasons, but the main reason is how user friendly it makes uploading and sharing code.

:::


## What is Python?

:::{.incremental}
- Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.
  - It supports multiple programming paradigms, including procedural, object-oriented, and functional programming. 
  - Its extensive standard library and the vast ecosystem of third-party packages make it suitable for a wide range of applications, from web development and data analysis to artificial intelligence and scientific computing.
:::


## What is Google Colab?
- [https://colab.research.google.com/](https://colab.research.google.com/){target="_blank"} is analogous to Google Drive, but specifically for writing and executing Python code in your browser.
  - The base Colab link listed above leads to a Python notebook introducing Colab and how to use it.

- This video also helps get started with Colab if you are unfamiliar with the format!
  - [https://www.youtube.com/watch?v=inN8seMm7UI](https://www.youtube.com/watch?v=inN8seMm7UI){target="_blank"}


## Why use Colab?
:::{.incremental}
- A key benefit of Colab is that it is entirely free to use and has many of the standard Python modules pre installed. 
  - It allows for CPU or GPU usage, even for free users, and stores the files in Google’s servers so you can access your files from anywhere you can connect to the Internet.
  
- Using Colab also means you can entirely avoid the process of installing Python and any dependencies onto your computer.

- Colab notebooks don’t just contain Python code. They can contain text, images, and HTML!

- Ultimately, they're intuitive to use and let you jump right into the code and data analysis without needing to worry about the more cumbersome details needed to run Python notebooks on a personal computer.
:::

## What is R?

- **R** is a programming language and software environment designed for statistical computing and graphics. 

- R has become a major tool in data analysis, statistical modeling, and visualization. 
  - It is widely used among statisticians and data scientists for developing statistical software and performing data analysis. 
  - R is open source and freely available. 


## What is RStudio?

:::{.incremental}
- **RStudio** is an integrated development environment (IDE) mainly for R. 

- RStudio is a user-friendly interface that makes using R easier and more interactive. 
  - It provides a console, syntax-highlighting editor that supports direct code execution, as well as tools for plotting, history, debugging, and workspace management.
  - It integrates well with Git. 
  
:::




## Python vs. R

:::: {.incremental}
:::: {.columns}

::: {.column width="50%"}

### Python

- Python can be used for a wide range of applications, from web and game development to machine learning, making it a highly versatile language.

- Python has the largest community in the programming world, providing a wealth of resources, libraries, and frameworks. 

:::

::: {.column width="50%"}
### R
- R is particularly strong in statistical analysis and visualization, with a vast number of packages for statistical methods, including machine learning.

- The community around R, particularly in academia and research, is very active.


:::

::::

- Both Python and R hold significant value in industry and government sectors. 
  - However, Python is often more favored for roles in the industry, whereas R tends to be preferred for positions in the public sector.



::::





# Python Basics {background-color="#1c4982"}

## Python Basics
### Objectives
- In this Section, we will discuss the basics of objects, types, operations, and imports. 

These are the basic building blocks of almost all programming languages and will serve you well for your coding journey.


- Everything is an __object__, and every _object_ has a __type__.


##  Python Basics
### Variables Are Names, Not Places

- The most basic built-in data types that you’ll need to know about are: **integers** 10, **floats** 1.23, **strings** like this, **booleans** True, and **nothing** None.

- Python also has a built-in type called a **list** [10, 15, 20] that can *contain* anything, even different **types** 

```{.python}
list_example = [10, 1.23, "like this", True, None]
print(list_example)
type(list_example)
```





##  Python Basics
### Types

:::: {.columns}
::: {.column width="50%"}
```{r}
#| eval: true
#| out-width: "100%"
#| fig-align: 'center'
#| fig-cap: "Python’s basic data types"

knitr::include_graphics("lec_figs/int-py-tab2-1.png")
```
:::

::: {.column width="50%"}
- The second column (Type) contains the Python name of that type. 

- The third column (Mutable?) indicates whether the value can be changed after creation.
:::
::::




##  Python Basics
### Brackets

- There are several kinds of brackets in Python, including `[]`, `{}`, and `()`. 


::: {.panel-tabset}

## `[]`
- `[]` is used to denote a **list** or to signify accessing a *position* using an index.

```{.python}
vector = ['a', 'b']
vector[0]
```





## `{}`
- `{}` is used to denote a **set** or a **dictionary** (with key-value pairs).

```{.python}
{'a', 'b'}
{'first_letter': 'a', 'second_letter': 'b'}
```




## `()`
- `()` is used to denote a **tuple**, or the *arguments* to a *function*, e.g., function(x)  where x is the input passed to the function, or to indicate the order operations are carried out.

```{.python}
num_tup = (1, 2, 3)
sum(num_tup)
```



:::



##  Python Basics
### Lists and Slicing

- Lists are a really useful way to work with lots of data at once. 
  - We can also construct them by appending entries:

```{.python}
list_example = [10, 1.23, "like this", True, None]
list_example.append("one more entry")
print(list_example)
```

- We can access earlier entries using an *index*, which begins at 0 and ends at one less than the length of the list.

```{.python}
print(list_example[0])
print(list_example[-1])
```




##  Python Basics
### Lists and Slicing

- Slicing can be even more elaborate than that because we can jump entries using a second colon. 

```{.python}
# range() produces a list of integers from the value to one less than the last
list_of_numbers = list(range(1, 11))
start = 1
stop = -1
step = 2
print(list_of_numbers[ start : stop : step ])
```




##  Python Basics
### Operators

- All of the basic operators you see in mathematics are available to use: `+` for addition, `-` for subtraction, `*` for multiplication, `**` for powers, `/` for division, `//` for integer division, and `%` for modulo.

  i. These work as you’d expect on numbers. 
  i. These operators are sometimes defined for other built-in data types too. 
    - We can ‘sum’ strings (which really concatenates them):

```{.python}
string_one = "This is an example "
string_two = "of string concatenation"
string_full = string_one + string_two
print(string_full)
```



##  Python Basics
### Operators

:::: {.columns}
::: {.column width="50%"}
- It works for lists too:

```{.python}
list_one = ["apples", "oranges"]
list_two = ["pears", "satsumas"]
list_full = list_one + list_two
print(list_full)
```

:::

::: {.column width="50%"}
- We can multiply strings!

```{.python}
string = "apples, "
print(string * 3)
```

:::
::::



##  Python Basics
### Operators

- We can combine the arithmetic operators with assignment by putting the operator before the `=`.

:::: {.columns}
::: {.column width="50%"}
- `x += 1` is equivalent to `x = x + 1`.
```{.python}
x = 3
x += 1
```
:::

::: {.column width="50%"}
- `a -= 2` is equivalent to `a = a - 2`.
```{.python}
a = 2
a -= 2
```
:::
:::: 



##  Python Basics
### Operators

**Q**. Using Python operations only, what is
$$\frac{2^5}{7 \cdot (4 - 2^3)} \quad\text{?}$$ 






##  Python Basics
### Strings

- From strings, we can access the individual characters via slicing and indexing. 


```{.python}
string = "cheesecake"
print( string[-4:] )
```


- Both lists and strings will allow us to use the `len()` command to get their length:

:::: {.columns}
::: {.column width="50%"}
- `x += 1` is equivalent to `x = x + 1`.
```{.python}
string = "cheesecake"
print( "String has length:" )
print( len(string) )
```
:::

::: {.column width="50%"}
- `a -= 2` is equivalent to `a = a - 2`.
```{.python}
list_of_numbers = range(1, 20)
print( "List of numbers has length:" )
print( len(list_of_numbers) )
```
:::
::::




##  Python Basics
### Booleans and Conditions

- Boolean data have either `True` or `False` value.


- There are two types of operation that are associated with booleans: boolean operations.
  - Existing booleans are combined, and condition operations, which create a boolean when executed.



```{r, out.width='100%', fig.align='center'}
text_tbl <- data.frame(
  Operator = c("x and y", "x or y", "not x"),
  Description = c("Are x and y both True?",
"Is at least one of x and y True?",
"Is x False?")
  )

DT::datatable(text_tbl, rownames = FALSE,
              options = list(
  dom = 't', # This sets the DOM layout without the search box ('f') and 'Show entries' dropdown ('l')
  paging = FALSE, # Disable pagination
  columnDefs = list(list(
    targets = "_all", # Applies to all columns
    orderable = FALSE # Disables sorting
  ))
), callback = htmlwidgets::JS("
  // Change header background and text color
  $('thead th').css('background-color', '#1c4982');
  $('thead th').css('color', 'white');

  // Loop through each row and alternate background color
  $('tbody tr').each(function(index) {
    if (index % 2 == 0) {
      $(this).css('background-color', '#d1dae6'); // Light color for even rows
    } else {
      $(this).css('background-color', '#9fb2cb'); // Dark color for odd rows
    }
  });

  // Set text color for all rows
  $('tbody tr').css('color', 'black');

  // Add hover effect
  $('tbody tr').hover(
    function() {
      $(this).css('background-color', '#607fa7'); // Color when mouse hovers over a row
    }, 
    function() {
      var index = $(this).index();
      if (index % 2 == 0) {
        $(this).css('background-color', '#d1dae6'); // Restore even row color
      } else {
        $(this).css('background-color', '#9fb2cb'); // Restore odd row color
      }
    }
  );
")
)


```



##  Python Basics
### Booleans and Conditions

Conditions are expressions that evaluate as booleans. 

```{r, out.width='100%', fig.align='center'}
text_tbl <- data.frame(
  Operator = c("x == y", "x != y", "x > y", "x >= y", "x < y", "x <= y", "x is y"),
  Description = c("Is x equal to y?",
"Is x greater than y?",
"Is x greater than or equal to y?",
"Is x greater than or equal to y?",
"Is x less than y?",
"Is x less than or equal to y?",
"Is x the same object as y?" )
)



DT::datatable(text_tbl, rownames = FALSE,
              options = list(
  dom = 't', # This sets the DOM layout without the search box ('f') and 'Show entries' dropdown ('l')
  paging = FALSE, # Disable pagination
  columnDefs = list(list(
    targets = "_all", # Applies to all columns
    orderable = FALSE # Disables sorting
  ))
), callback = htmlwidgets::JS("
  // Change header background and text color
  $('thead th').css('background-color', '#1c4982');
  $('thead th').css('color', 'white');

  // Loop through each row and alternate background color
  $('tbody tr').each(function(index) {
    if (index % 2 == 0) {
      $(this).css('background-color', '#d1dae6'); // Light color for even rows
    } else {
      $(this).css('background-color', '#9fb2cb'); // Dark color for odd rows
    }
  });

  // Set text color for all rows
  $('tbody tr').css('color', 'black');

  // Add hover effect
  $('tbody tr').hover(
    function() {
      $(this).css('background-color', '#607fa7'); // Color when mouse hovers over a row
    }, 
    function() {
      var index = $(this).index();
      if (index % 2 == 0) {
        $(this).css('background-color', '#d1dae6'); // Restore even row color
      } else {
        $(this).css('background-color', '#9fb2cb'); // Restore odd row color
      }
    }
  );
")
)

```



##  Python Basics
### Booleans and Conditions

- The `==` is an operator that compares the objects on either side and returns `True` if they have the same values

```{.python}
boolean_condition1 = 10 == 20
print(boolean_condition1)

boolean_condition2 = 10 == '10'
print(boolean_condition2)
```

**Q**. What does `not (not True)` evaluate to?





##  Python Basics
### Booleans and Conditions

- The real power of conditions comes when we start to use them in more complex examples, such as `if` statements.


```{.python}
name = "Geneseo"
score = 99

if name == "Geneseo" and score > 90:
    print("Geneseo, you achieved a high score.")

if name == "Geneseo" or score > 90:
    print("You could be called Geneseo or have a high score")

if name != "Geneseo" and score > 90:
    print("You are not called Geneseo and you have a high score")
```



##  Python Basics
### Booleans and Conditions

- Given that `==` and `!=` test for equality and not equal, respectively, you may be wondering what the keyword `is`  is for.
  - Remember that everything in Python is an object, and that values can be assigned to objects.
  - `==` and `!=` compare values, while `is` compare objects.

:::: {.columns}
::: {.column width="50%"}
```{.python}
name_list = ["Ada", "Adam"]
name_list_two = ["Ada", "Adam"]
```
:::

::: {.column width="50%"}
```{.python}
# Compare values
print(name_list == name_list_two)

# Compare objects
print(name_list is name_list_two)
```
:::
::::



##  Python Basics
### Booleans and Conditions

- One of the most useful conditional keywords is `in`. 
  - This one must pop up ten times a day in most coders’ lives because it can pick out a variable or make sure something is where it’s supposed to be.


```{.python}
name_list = ["Lovelace", "Smith", "Hopper", "Babbage"]

print("Lovelace" in name_list)

print("Bob" in name_list)
```

**Q**. Check if “a” is in the string “Sun Devil Arena” using `in`. Is “a” in “Anyone”?




##  Python Basics
### Booleans and Conditions

- One conditional construct we're bound to use at some point, is the `if-else` chain:

```{.python}
score = 98

if score == 100:
    print("Top marks!")
elif score > 90 and score < 100:
    print("High score!")
elif score > 10 and score <= 90:
    pass
else:
    print("Better luck next time.")
```




##  Python Basics
### Booleans and Conditions


**Q**. Create a new `if-else` chain that prints “well done” if a score is over 90, “good” if between 40 and 90, and “bad luck” otherwise.






##  Python Basics
### Booleans and Conditions


- We can make multiple assignment or multiple boolean comparisons in a single line.

```{.python}
a, b = 3, 6

1 < a < b < 20
```






<script>
document.addEventListener('wheel', function(event) {
    if (event.deltaY > 0) {
        Reveal.next(); // Scroll down to go to the next slide
    } else {
        Reveal.prev(); // Scroll up to go to the previous slide
    }
}, false);
</script>