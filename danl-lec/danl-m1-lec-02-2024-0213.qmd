---
title: Lecture 2
subtitle: Pandas Basics - Loading, Summarizing, Selecting, Counting, Sorting, and Indexing Data
format:
  clean-revealjs:
    self-contained: true
    incremental: true
    # logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2024-02-13
callout-icon: false
execute: 
  eval: false
  echo: true
# bibliography: refs.bib
# include-after-body: backwards.html

---


# Pandas Basics {background-color="#1c4982"}

## Pandas Basics
### Learning Objectives

- Loading `DataFrame`
- Getting a Summary of `DataFrame`
- Selecting Variables in a `DataFrame` 
- Counting Values in a `DataFrame` 
- Sorting `DataFrame`
- Indexing `DataFrame`


# Loading Data {background-color="#1c4982"}


## Pandas Basics
###  `Series` and `DataFrame`

<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/py-series-df.png" width="400px">
</p>

- `Series`:	a collection of a one-dimensional object containing a sequence of values.
  
- `DataFrame`: a collection of `Series` columns with an *index*.


## Pandas Basics
### Importing a data set with `read_csv()`

:::{.nonincremental}
- A CSV (comma-separated values) is a plain-text file that uses a comma to separate values (e.g., [nba.csv](https://bcdanl.github.io/data/nba_show_na.csv)).

- The CSV is widely used for storing data, and we will use this throughout the module.

- We use the `read_csv()` function to load a CSV data file.

```{.python}
import pandas as pd
nba = pd.read_csv("https://bcdanl.github.io/data/nba.csv")
type(nba)
nba
```


:::

- The `DataFrame` is the workhorse of the pandas library and the data structure.



## Pandas Basics
### Importing a data set with `read_csv()`


```{.python}
nba = pd.read_csv("https://bcdanl.github.io/data/nba.csv",
                  parse_dates = ["Birthday"])
nba
```

- We can use the `parse_dates` parameter to coerce the values into `datetimes`.


## Pandas Basics
### Colab's Interactive DataFrame Display


```{.python}
from google.colab import data_table
data_table.enable_dataframe_formatter()  # Enabling an interactive DataFrame display
nba
```

- We can use the `from` *keyword* when specifying Python package from which we want to `import` something (e.g., functions).

- Colab includes an extension that renders pandas `DataFrames` into interactive tables.


# Getting a Summary of Data {background-color="#1c4982"}

## Pandas Basics
### DataFrame Terminologies: Variables, Observations, and Values


<p align="center">
  <img src="https://bcdanl.github.io/lec_figs/tidy-1.png">
</p>


1. Each **variable** is a *column*.
2. Each **observation** is a *row*.
3. Each **value** is a *cell*.


<!-- - This structure is intuitive and aligns with the way data is often collected and used in data visualization,  statistical analysis, and machine learning. -->

<!-- - When we work with `DataFrame`, we mean a variable a column. -->





## Pandas Basics
### DataFrame Terminologies: Dot Operators, Methods and Attributes

- The dot operator (`DataFrame.`) is used for an **attribute**  or a **method** on objects. 

- A method (`DataFrame.method()`) is a function that we can call on a `DataFrame` to perform operations, modify data, or derive insights.
  - e.g., `nba.info()`

- An attribute (`DataFrame.attribute`) is a property that provides information about the `DataFrame`'s structure or content without modifying it. 
  - e.g., `nba.dtype`


## Pandas Basics
### Getting a Summary of a `DataFrame` with `.info()`

:::: {.columns}

::: {.column width="50%"}
```{.python}
nba.info()    # method
```
:::

::: {.column width="50%"}
```{.python}
nba.shape     # attribute
nba.dtypes    # attribute
nba.columns   # attribute
nba.count()   # method
```
:::

::::

- Every `DataFrame` object has a `.info()` method that provides a summary of a DataFrame:
  - Variable names (`.columns`)
  - Number of variables/observations (`.shape`)
  - Data type of each variable (`.dtypes`)
  - Number of non-missing values in each variable (`.count()`)
    - Pandas often displays missing values as `NaN`.



<!-- -  Since `.shape` is an **attribute** of the `DataFrame` object, and not a **function** or **method** of the `DataFrame` object, it does not have round parentheses after the period. -->



## Pandas Basics
### Getting a Summary of a `DataFrame` with `.describe()`

```{.python}
nba.describe()
nba.describe(include='all')
```


- `.describe()` method generates **descriptive statistics** that summarize the central tendency, dispersion, and distribution of each variable. 
  - It can also process `string`-type variables if specified explicitly (`include='all'`).




# Selecting Variables {background-color="#1c4982"}

## Pandas Basics
### Selecting a Variable by its Name

```{.python}
nba_player_name_1 = nba['Name']   # Series
nba_player_name_1

nba_player_name_2 = nba[ ['Name'] ]   # DataFrame
nba_player_name_2
```

- If we want only a specific variable from a `DataFrame`, we can access the variable with its name using squared brackets, `[ ]`.
  - `DataFrame[ 'var_1' ]` 
  - `DataFrame[ ['var_1'] ]`




## Pandas Basics
### Selecting Multiple Variables by their Names

```{.python}
nba_player_name_team = nba[ ['Name', 'Team'] ]
nba_player_name_team
```

- In order to specify multiple variables by their names, we need to pass in a Python list between the square brackets.
  - `DataFrame[ ['var_1', 'var_2', ... ] ]`



## Pandas Basics
### Selecting Multiple Variables with `select_dtypes()`


```{.python}
# To include only string variables
nba.select_dtypes(include = "object")

# To exclude string and integer variables
nba.select_dtypes(exclude = ["object", "int"])
```

- We can use the `select_dtypes()` method to select columns based on their data types.
  - The method accepts two parameters, `include` and `exclude`.


# Counting Methods {background-color="#1c4982"}


## Pandas Basics
### Counting with `.count()` 


:::: {.columns}

::: {.column width="100%"}
```{.python}
nba['Salary'].count()
nba[['Salary']].count()
```
:::

::::

- The `.count()` counts <u>the number of non-missing values</u> in a `Series`/`DataFrame`. 



## Pandas Basics
### Counting with `.value_counts()` 


:::: {.columns}

::: {.column width="50%"}
```{.python}
nba['Team'].value_counts()
```
:::
::: {.column width="50%"}
```{.python}
nba[['Team']].value_counts()
```
:::

::::

- The `.value_counts()` counts <u>the number of occurrences of each unique value</u> in a `Series`/`DataFrame`. 



## Pandas Basics
### Counting with `.nunique()` 

:::: {.columns}

::: {.column width="50%"}
```{.python}
nba[['Team']].nunique()
```
:::

::: {.column width="50%"}
```{.python}
nba.nunique()
```
:::

::::


- The `.nunique()` counts <u>the number of unique values</u> in each variable in a `DataFrame`. 



## Pandas Basics

Let's do Questions 1-4 in [Classwork 2](https://bcdanl.github.io/module-1/danl-cw/danl-m1-cw-2.html)!


# Sorting Methods {background-color="#1c4982"}

## Pandas Basics
### Selecting the first/last `n` observations with `.head()` & `.tail()`

:::: {.columns}

::: {.column width="50%"}
```{.python}
nba.head()
nba.head(10)
```
:::

::: {.column width="50%"}
```{.python}
nba.tail()
nba.tail(10)
```

:::

::::

- We can use the `.head()`/`.tail()` method of a `DataFrame` to keep only the first/last `n` observations.
  - This can be useful with **sorting** methods.


## Pandas Basics
### Sorting by a Single Variable with `sort_values()`

```{.python}
# The two lines below are equivalent
nba.sort_values(["Name"])
nba.sort_values(by = ["Name"])
```


- The `sort_values()` method’s first parameter, `by`, accepts the variables that pandas should use to sort the `DataFrame`.


## Pandas Basics
### Sorting by a Single Variable with `sort_values()`

```{.python}
# The two lines below are equivalent
nba.sort_values(["Name"], ascending = False)
```


- The `sort_values()` method’s `ascending` parameter determines the sort order.
  - It has a default argument of `True`.
  - By default, pandas will sort:
    - A variable of numbers in *increasing* order;
    - A variable of strings in *alphabetical* order;
    - A variable of datetimes in *chronological* order.




## Pandas Basics
### Sorting by a Single Variable with `sort_values()` and `head()` & `tail()`


:::: {.columns}

::: {.column width="50%"}
```{.python}
df = nba.sort_values(["Salary"])
df.head(5)
```
:::

::: {.column width="50%"}
```{.python}
df = nba.sort_values(["Salary"])
df.tail(5)
```

:::

::::


- `sort_values()` with `.head()` or `.tail()` can be useful to find the observations with the `n` smallest/largest values in a variable.


## Pandas Basics
### Method Chaining

```{.python}
(
    nba
    .sort_values(['Salary'])
    .head(5)
)
```


-  `DataFrame` has various methods that modify the existing `DataFrame`. 
  - **Method Chaining**: We can call methods sequentially without the need to store intermediate results.
  


## Pandas Basics
### Sorting by a Single Variable with `nsmallest()` and `nlargest()`

```{.python}
nba.nsmallest(5, 'Salary')
nba.nlargest(5, 'Salary')
```

- `nsmallest()` are useful to get the first `n` observations ordered by a variable in <u>*ascending*</u> order.

- `nlargest()` are useful to get the first `n` observations ordered by a variable in <u>*descending*</u> order.





## Pandas Basics
### Sorting by a Single Variable with `nsmallest()` and `nlargest()`

```{.python}
nba.nsmallest(4, 'Salary', keep = "all")
nba.nlargest(4, 'Salary', keep = "all")
```

- `keep = "all"` keeps all duplicates, even it means selecting more than `n` observations.



## Pandas Basics
### Sorting by Multiple Variables with `sort_values()`

```{.python}
nba.sort_values(["Team", "Name"])
nba.sort_values(by = ["Team", "Name"])
```

- We can sort a `DataFrame` by multiple columns by passing a *list* to the `by` parameter.



## Pandas Basics
### Sorting by Multiple Variables with `sort_values()`

```{.python}
nba.sort_values(by = ["Team", "Name"], 
                ascending = False)
```

- We can pass a single Boolean to the `ascending` parameter to apply the same sort order to each column.


## Pandas Basics
### Sorting by Multiple Variables with `sort_values()`

```{.python}
nba.sort_values(by = ["Team", "Name"], 
                ascending = [False, True])
```

- If we want to sort each variable in a different order, we can pass a Boolean *list* to the `ascending` parameter.



## Pandas Basics
### Sorting by Multiple Variables with `sort_values()`

**Q**. Which players on each team are paid the most?


## Pandas Basics
### Sorting by Multiple Variables with `sort_index()`


:::: {.columns}

::: {.column width="50%"}
```{.python}
# The two lines below are equivalent
nba.sort_index()
nba.sort_index(ascending = True).
```
:::

::: {.column width="50%"}
```{.python}
nba.sort_index(ascending = False).
```
:::

::::

- How can we return it to its original form of `DataFrame`?

- Our `nba` `DataFrame` still has its numeric index.

- If we could sort the data set by index positions rather than by column values, we could return it to its original shape.




## Pandas Basics
### Changing the Order of Variables with `sort_index()`

```{.python}
# The two lines below are equivalent
nba.sort_index(axis = "columns")
nba.sort_index(axis = 1)
```

- The `sort_index()` method can also be used to change the order of variables in an alphabetical order. 
  - We need to add an `axis` parameter and pass it an argument of `"columns"` or `1`.




# Setting a New Index {background-color="#1c4982"}

## Pandas Basics
### Setting a New Index

- We can use the `set_index()` method when we want to change the current index of a `DataFrame` to one or more existing columns. 
  - This is particularly useful when:
    - We have a column that *uniquely identifies* each observations (e.g., ID);
    - We sometimes want to use an *unique identifier* as the index for more efficient data wrangling.
    

## Pandas Basics
### Setting a New Index with `set_index()`

```{.python}
# The two lines below are equivalent
nba.set_index(keys = "Name")
nba.set_index("Name")
```

- The `set_index()` method returns a new `DataFrame` with a given column set as the index. 
  - Its first parameter, `keys`, accepts the column name.
  
  


## Pandas Basics
### Re-setting an Index with `reset_index()`

```{.python}
nba2 = nba.set_index("Name")
nba2.reset_index(inplace=True)    # Useful for the chain of method operations
```

  
- We use the `reset_index()` method: 
  - When we want to convert the index back into a `DataFrame` column;
  - When we need to reset the index to the default integer index. 

- Note: With `inplace=True`, the operation alters the original `DataFrame` directly.



## Pandas Basics

Let's do Questions 5-7 in [Classwork 2](https://bcdanl.github.io/module-1/danl-cw/danl-m1-cw-2.html)!





<!-- ## Pandas Basics -->
<!-- ### Vectorized Operations -->

<!-- ```{.python} -->
<!-- # Creating two Series -->
<!-- series1 = pd.Series([1, 2, 3, 4, 5]) -->
<!-- series2 = pd.Series( -->
<!--                 [10, 20, 30, 40, 50]) -->

<!-- # Adding the two Series using a vectorized operation -->
<!-- result = series1 + series2 -->

<!-- # Squaring the values using a vectorized operation -->
<!-- squared = series ** 2 -->
<!-- ``` -->

<!-- - `pandas` performs *vectorized operations* on `Series`. -->
<!--   - This enables us to apply functions and perform operations on the data efficiently, without the need for explicit loops. -->

<script>
document.addEventListener('wheel', function(event) {
    if (event.deltaY > 0) {
        Reveal.next(); // Scroll down to go to the next slide
    } else {
        Reveal.prev(); // Scroll up to go to the previous slide
    }
}, false);
</script>