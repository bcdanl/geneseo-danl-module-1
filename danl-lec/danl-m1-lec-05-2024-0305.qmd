---
title: Lecture 5
subtitle: Group Opeations
format:
  clean-revealjs:
    self-contained: true
    #### logo: logo-title-slide.png
author:
  - name: Byeong-Hak Choe
    email: bchoe@geneseo.edu
    affiliations: SUNY Geneseo
date: 2024-03-05
callout-icon: false
execute: 
  eval: false
  echo: true
#### bibliography: refs.bib
#### include-after-body: backwards.html
---


```{r setup}
#| include: false
#| eval: true

library(knitr)
library(tidyverse)
#### set default options
opts_chunk$set(echo = FALSE,
               fig.width = 7.252,
               fig.height = 4,
               comment = "####",
               dpi = 300)

knitr::knit_engines$set("markdown")
```


# Groupby Operations: Split-Apply-Combine {background-color="#1c4982"}

## Groupby Operations: Split-Apply-Combine
### Built-in Aggregation Methods

::: {.panel-tabset}
## (1)
```{r, eval = T, echo = F, out.width='100%', fig.align='center'}
text_tbl <- data.frame(
  `Pandas Method` = c(".min()", ".quantile(q = .25)", ".quantile(q = .5)", ".quantile(q = .75)", ".max()"),
  Description = c("Minimum values",
"25th percentile of the values",
"Median values",
"75th percentile of the values",
"Maximum values" )
)

# Create a DT datatable without search box and 'Show entries' dropdown
DT::datatable(text_tbl, rownames = FALSE,
              options = list(
  dom = 't', # This sets the DOM layout without the search box ('f') and 'Show entries' dropdown ('l')
  paging = FALSE, # Disable pagination
  columnDefs = list(list(
    targets = "_all", # Applies to all columns
    orderable = FALSE # Disables sorting
  ))
), callback = htmlwidgets::JS("
  // Change header background and text color
  $('thead th').css('background-color', '#1c4982');
  $('thead th').css('color', 'white');

  // Loop through each row and alternate background color
  $('tbody tr').each(function(index) {
    if (index % 2 == 0) {
      $(this).css('background-color', '#d1dae6'); // Light color for even rows
    } else {
      $(this).css('background-color', '#9fb2cb'); // Dark color for odd rows
    }
  });

  // Set text color for all rows
  $('tbody tr').css('color', 'black');

  // Add hover effect
  $('tbody tr').hover(
    function() {
      $(this).css('background-color', '#607fa7'); // Color when mouse hovers over a row
    }, 
    function() {
      var index = $(this).index();
      if (index % 2 == 0) {
        $(this).css('background-color', '#d1dae6'); // Restore even row color
      } else {
        $(this).css('background-color', '#9fb2cb'); // Restore odd row color
      }
    }
  );
")
)

```



## (2)
```{r, eval = T, echo = F, out.width='100%', fig.align='center'}
text_tbl <- data.frame(
  `Pandas Method` = c(".count()", ".size()", ".sum()", ".mean()", ".std()", ".var()"),
  Description = c("Frequency count not including NaN values",
"Frequency count with NaN values",
"Sum of the values",
"Mean of the values",
"Sample standard deviation",
"Variance")
)

# Create a DT datatable without search box and 'Show entries' dropdown
DT::datatable(text_tbl, rownames = FALSE,
              options = list(
  dom = 't', # This sets the DOM layout without the search box ('f') and 'Show entries' dropdown ('l')
  paging = FALSE, # Disable pagination
  columnDefs = list(list(
    targets = "_all", # Applies to all columns
    orderable = FALSE # Disables sorting
  ))
), callback = htmlwidgets::JS("
  // Change header background and text color
  $('thead th').css('background-color', '#1c4982');
  $('thead th').css('color', 'white');

  // Loop through each row and alternate background color
  $('tbody tr').each(function(index) {
    if (index % 2 == 0) {
      $(this).css('background-color', '#d1dae6'); // Light color for even rows
    } else {
      $(this).css('background-color', '#9fb2cb'); // Dark color for odd rows
    }
  });

  // Set text color for all rows
  $('tbody tr').css('color', 'black');

  // Add hover effect
  $('tbody tr').hover(
    function() {
      $(this).css('background-color', '#607fa7'); // Color when mouse hovers over a row
    }, 
    function() {
      var index = $(this).index();
      if (index % 2 == 0) {
        $(this).css('background-color', '#d1dae6'); // Restore even row color
      } else {
        $(this).css('background-color', '#9fb2cb'); // Restore odd row color
      }
    }
  );
")
)

```



## (3)
```{r, eval = T, echo = F, out.width='100%', fig.align='center'}
text_tbl <- data.frame(
  `Pandas Method` = c(".first()", ".last()", ".nth()"),
  Description = c(
"Returns the first row",
"Returns the last row",
"Returns the n-th row (starting from 0-th)")
)

# Create a DT datatable without search box and 'Show entries' dropdown
DT::datatable(text_tbl, rownames = FALSE,
              options = list(
  dom = 't', # This sets the DOM layout without the search box ('f') and 'Show entries' dropdown ('l')
  paging = FALSE, # Disable pagination
  columnDefs = list(list(
    targets = "_all", # Applies to all columns
    orderable = FALSE # Disables sorting
  ))
), callback = htmlwidgets::JS("
  // Change header background and text color
  $('thead th').css('background-color', '#1c4982');
  $('thead th').css('color', 'white');

  // Loop through each row and alternate background color
  $('tbody tr').each(function(index) {
    if (index % 2 == 0) {
      $(this).css('background-color', '#d1dae6'); // Light color for even rows
    } else {
      $(this).css('background-color', '#9fb2cb'); // Dark color for odd rows
    }
  });

  // Set text color for all rows
  $('tbody tr').css('color', 'black');

  // Add hover effect
  $('tbody tr').hover(
    function() {
      $(this).css('background-color', '#607fa7'); // Color when mouse hovers over a row
    }, 
    function() {
      var index = $(this).index();
      if (index % 2 == 0) {
        $(this).css('background-color', '#d1dae6'); // Restore even row color
      } else {
        $(this).css('background-color', '#9fb2cb'); // Restore odd row color
      }
    }
  );
")
)
```


## (4)

We know we can calculate multiple summary statistics simultaneously with `.describe()`.

```{.python}
## group by continent and describe each group
continent_describe = df.groupby('continent')["lifeExp"].describe()
continent_describe
```



  
::: 

## Groupby Operations: Split-Apply-Combine
### Aggregation Functions

##### Functions From Other Libraries

We can also use other libraries' functions that are not listed in the previous tables. (e.g., `numpy`, `scipy`)

```{.python}
## calculate the average life expectancy by continent
## but use the np.mean function
cont_le_agg = df.groupby('continent')["lifeExp"].agg(np.mean)
```

**Q**. Add a new variable, the log of `lifeExp`, using `np.log` to DataFrame `df`.



## Groupby Operations: Split-Apply-Combine
### Aggregation Functions


::: {.panel-tabset}
## (1)
Sometimes we may want to perform a calculation that is not provided by Pandas or another library.

- Let’s create our own mean function with `def`.
```{.python}
def my_mean(values):
  n = len(values)    ## get the total number of numbers for the denominator
  sum = 0   ## start the sum at 0
  for value in values:
      sum += value   ## add each value to the running sum
  return sum / n   ## return the summed values divided by the number of values
```




## (2)

We can pass our custom function straight into the `.agg()` method with `my_mean`.
```{.python}
## use our custom function into agg
agg_my_mean = df.groupby('year')["lifeExp"].agg(my_mean)

agg_my_mean
```





## (3)
We can write functions that take multiple parameters.
```{.python}
def my_mean_diff(values, diff_value):
    """Difference between the mean and diff_value
    """
    n = len(values)
    sum = 0
    for value in values:
        sum += value
    mean = sum / n
    return(mean - diff_value)
```




## (4)
Using `my_mean_diff`, we will calculate the global average life expectancy, `diff_value`, and subtract it from each grouped value.

```{.python}
## custom aggregation function with multiple parameters
agg_mean_diff = (
  df
  .groupby("year")["lifeExp"]
  .agg(my_mean_diff, diff_value = global_mean)
)
```





## (5)

When we want to calculate multiple functions, we can pass the multiple functions into `.agg()`
 
```{.python}

## calculate the count, mean, std of the lifeExp by continent
gdf = (
  df
  .groupby("year")
  ["lifeExp"]
  .agg([np.count_nonzero, np.mean, np.std])
)
```



::: 




## Groupby Operations: Split-Apply-Combine
### Use a dict in `.agg()` on a `Series`

We can also pass `.agg()` a Python dictionary (`{key : value}`). 
  - The results will differ depending on whether we are aggregating directly on a `DataFrame` or on a `Series` object.
    - When specifying a `dict` on a grouped `DataFrame`, the `keys` are the columns of the `DataFrame`, and the `values` are the functions used in the aggregated calculation.

```{.python}
gdf_dict = df.groupby("year").agg(
  {"lifeExp": "mean",
    "pop": "median",
    "gdpPercap": "median"})
```




## Groupby Operations: Split-Apply-Combine
### Use a dict in `.agg()` on a `DataFrame`

To have user-defined column names in the output of a grouped series calculation, we need to rename those columns.

:::: {.columns}
::: {.column width="50%"}
```{.python}
gdf = (
  df
  .groupby("year")
  ["lifeExp"]
  .agg(
    [
      np.count_nonzero,
      np.mean,
      np.std,
    ]
  )
```

:::
::: {.column width="50%"}
```{.python}
  .rename(
    columns={
      "count_nonzero": "count",
      "mean": "avg",
      "std": "std_dev",
    }
  )
  .reset_index() ## return a flat dataframe
)
```

:::
::::




## Groupby Operations: Split-Apply-Combine
### Transform

When we transform data, we pass values from our dataframe into a function.
  
  - The function then “transforms” the data. 
  
  - Unlike `.agg()`, which can take multiple values and return a single (aggregated) value, `.transform()` takes multiple values and returns a one-to-one transformation of the values. 
  
  - That is, it does not reduce the amount of data.
  


## Groupby Operations: Split-Apply-Combine
### Transform (cont.)  
-  Let’s calculate the z-score of our life expectancy data by year.
$$
z = \frac{x - \mu}{\sigma}
$$

  - $x$ is a value in a variable
  - $\mu$ is the average of a variable
  - $\sigma$ is the standard deviation of a variable
  
$$
\sigma = \sqrt{\frac{1}{n}\sum_{i = 1}^{n}(x - \mu)^{2}}
$$






## Groupby Operations: Split-Apply-Combine
### Transform (cont.)  

The following is a function, `my_zscore(x)`, that calculates a z-score using Pandas methods.

```{.python}
def my_zscore(x):
  '''Calculates the z-score of provided data
  'x' is a vector or series of values
  '''
  return((x - x.mean()) / x.std())
```




## Groupby Operations: Split-Apply-Combine
### Transform (cont.)  

Now we can use this function to `.transform()` our data by group.

```{.python}
transform_z = df.groupby('year')["lifeExp"].transform(my_zscore)
```


- Note that both `df` and `transform_z` have the same number of rows and data.

```{.python}
df.shape
transform_z.shape
```






## Groupby Operations: Split-Apply-Combine
### Transform (cont.)  

The `scipy` library has its own `zscore()` function. 

Let’s use its `zscore()` function in a `.groupby() .transform()` and compare it to what happens when we do not use `.groupby()`.


```{.python}
from scipy.stats import zscore
## calculate a grouped zscore
sp_z_grouped = df.groupby('year')["lifeExp"].transform(zscore)

## calculate a nongrouped zscore
sp_z_nogroup = zscore(df["lifeExp"])

transform_z.head()
sp_z_grouped.head()
sp_z_nogroup[:5]
```





## Groupby Operations: Split-Apply-Combine
### `agg`, `transform`, and `apply`: when to use each with a `groupby`  

With all of the different options available, it can be confusing to know when to use the different functions available for performing `groupby` operations, namely: `.agg`, `.transform`, and `.apply`. 


Here are the key points to remember:
  - Use `.agg` when using a `groupby`, but you want your groups to become the new index.
  - Use `.transform` when using a `groupby`, but you want to retain your original index.
  - Use `.apply` when using a `groupby`, but you want to perform operations that will leave neither the original index nor an index of groups.






## Groupby Operations: Split-Apply-Combine
###  `.filter()`  

`.filter()` allows us to split our data by keys, and then perform some kind of boolean subsetting on the data.


-  Let’s work with the `tips` data set from `seaborn`:

```{.python}
import seaborn as sns
tips = sns.load_dataset('tips')

## note the number of rows in the original data
tips.shape


## look at the frequency counts for the table size
tips['size'].value_counts()
```





## Groupby Operations: Split-Apply-Combine
###  `.filter()`  (cont.)  

Suppose we want each group to consist of 30 or more observations.
  - To accomplish this goal, we can use the `.filter()` method on a grouped operation.

```{.python}
## filter the data such that each group has more than 30 observations
tips_filtered = (
  tips
  .groupby("size")
  .filter( lambda x : x["size"].count() >= 30 )
)

tips_filtered.shape
tips_filtered['size'].value_counts()
```




## Groupby Operations: Split-Apply-Combine
###  The `pandas.core.groupby.DataFrameGroupBy` object 

The `.agg()`, `.transform()`, and `.filter()` methods are commonly used after the `.groupby()`.

```{.python}
tips_10 = sns.load_dataset('tips').sample(10, random_state=42)
print(tips_10)
```

- We can choose to save just the `groupby` object without running any other `.agg()`, `.transform()`, or `.filter()` method on it.

:::: {.columns}
::: {.column width="50%"}
```{.python}
## save just the grouped object
grouped = tips_10.groupby('sex')
grouped
```
:::

::: {.column width="50%"}
```{.python}
## see the actual groups of the groupby
## it returns only the index
grouped.groups  ## row numbers?
```
:::
::::



## Groupby Operations: Split-Apply-Combine
###  Group Calculations Involving Multiple Variables 

- We have been usually performing `.groupby()` calculations on a single column. 
  - If we specify the calculation we want right after the `.groupby()`, however, Python will perform the calculation on all the columns it can and silently drop the rest.
  
```{.python}
## calculate the mean on relevant columns
avgs = grouped.mean()
avgs

## list all the columns
tips_10.columns  ## not all the columns reported a mean.
```




## Groupby Operations: Split-Apply-Combine
### Selecting a Group 


If we want to extract a particular group, we can use the `.get_group()` method, and pass in the group that we want. 

- For example, if we wanted the `Female` values:
```{.python}
## get the 'Female' group
female = grouped.get_group('Female')
female
```




## Groupby Operations: Split-Apply-Combine
### Iterating Through Groups 
- Another benefit of saving just the `groupby` object is that we can then iterate through the groups individually.

- We can iterate through our grouped values just like any other container (e.g., `list`, `dictionary`) in Python using a `for`-loop.

```{.python}
for sex_group in grouped:
    print(sex_group)
    
## we can't really get the 0 element from the grouped object
print(grouped[0])
```



## Groupby Operations: Split-Apply-Combine
### Iterating Through Groups (cont.) 

- Let’s modify the for loop to just show the first element, along with some of the things we get when we loop over the `grouped` object.

:::: {.columns}
::: {.column width="50%"}
```{.python}
for sex_group in grouped:
    type(sex_group) ## tuple
    len(sex_group) ## length 

    ## get the first element
    first_element = sex_group[0]
    first_element
    type(sex_group[0])
```
:::

::: {.column width="50%"}
```{.python}
    ## get the second element
    second_element = sex_group[1]
    second_element
    type(second_element)

    ## print what we have
    print(f'what we have:')
    print(sex_group)

    ## stop after first iteration
    break
```
:::
::::



## Groupby Operations: Split-Apply-Combine
### Iterating Through Groups (cont.) 

- The option of iterating through groups with `for`-loop is available for us if we need to iterate through the groups one at a time.




## Groupby Operations: Split-Apply-Combine
### Multiple Groups 

- We can add multiple variables to the `.groupby()`

```{.python}
## mean by sex and time
bill_sex_time = tips_10.groupby(['sex', 'time'])

group_avg = bill_sex_time.mean()
```



## Groupby Operations: Split-Apply-Combine
###  Flattening the Results (`.reset_index()`) 

-  Let’s look at the type of the `group_avg` we just calculated.

```{.python}
type(group_avg)
```

- If we look at the `columns` and the `index`, we get what we expect.
```{.python}
group_avg.columns
group_avg.index
```



## Groupby Operations: Split-Apply-Combine
###  Flattening the Results (`.reset_index()`) 

- If we want to get a regular flat DataFrame back, we can call the `.reset_index()` method on the results.

```{.python}
group_method = tips_10.groupby(['sex', 'time']).mean().reset_index()
group_method
```

-  Alternatively, we can use the `as_index = False` parameter in the `.groupby()` method (it is `True` by default).

```{.python}
group_param = tips_10.groupby(['sex', 'time'], as_index=False).mean()
group_param
```




## Groupby Operations: Split-Apply-Combine
###   Working With a MultiIndex 

Sometimes, we may want to chain calculations after a `.groupby()` method. 
  - We can always “flatten” the results and then execute another `.groupby()` statement, but that may not always be the most efficient way of performing the calculation.
  

Download `epi_sim.zip` from the Files section in Canvas.


Let's begin with this epidemiological simulation data on influenza cases in Chicago.

```{.python}
## notice that we can even read a compressed zip file of a csv
intv_df = pd.read_csv('data/epi_sim.zip')
```




## Groupby Operations: Split-Apply-Combine
###   Working With a MultiIndex 


The data set includes six columns:
  - `ig_type`: edge type (type of relationship between two nodes in the network, such as “school” and “work”)
  - `intervened`: time in the simulation at which an intervention occurred for a given person (pid)
  - `pid`: simulated person’s ID number
  - `rep`: replication run (each set of simulation parameters was run multiple times)
  - `sid`: simulation ID
  - `tr`: transmissibility value of the influenza virus



## Groupby Operations: Split-Apply-Combine
###   Working With a MultiIndex 

Let’s count the number of interventions for each replicate, intervention time, and treatment value. 
  - Here, we are counting the `ig_type` arbitrarily. 
  - We just need a value to get a count of observations for the groups.

```{.python}
count_only = (
  intv_df
  .groupby(["rep", "intervened", "tr"])
  ["ig_type"]
  .count()
)

count_only
```



## Groupby Operations: Split-Apply-Combine
###   Working With a MultiIndex 


Now that we’ve done a `.groupby() .count()`, we can perform an additional `.groupby()` that calculates the average value. 
  - However, our initial `.groupby()` method does not return a regular flat DataFrame.

```{.python}
type(count_only)
```


The results take the form of a **multi-index Series**. 



## Groupby Operations: Split-Apply-Combine
###   Working With a MultiIndex 

If we want to do another `.groupby()` operation, we have to pass in the levels parameter to refer to the multi-index levels.
  - Here we pass in `[0, 1, 2]` for the first, second, and third index levels, respectively.
 
```{.python}
count_mean = count_only.groupby(level=[0, 1, 2]).mean()
count_mean.head()
```




## Groupby Operations: Split-Apply-Combine
###   Working With a MultiIndex 


We can combine all of these operations in a single command.

```{.python}
count_mean = (
    intv_df
    .groupby(["rep", "intervened", "tr"])["ig_type"]
    .count()
    .groupby(level=[0, 1, 2])
    .mean()
)
```





## Groupby Operations: Split-Apply-Combine
###   Working With a MultiIndex 

See how the relationship between `intervened` and `ig_type` varies by `rep` and `tr`.

```{.python}
import seaborn as sns
import matplotlib.pyplot as plt
fig = sns.lmplot(
   data = count_mean.reset_index(),
   x = "intervened",
   y = "ig_type",
   hue = "rep",
   col = "tr",
   fit_reg = False,
   palette = "viridis" )
   
plt.show()
```









<script>
document.addEventListener('wheel', function(event) {
    if (event.deltaY > 0) {
        Reveal.next(); // Scroll down to go to the next slide
    } else {
        Reveal.prev(); // Scroll up to go to the previous slide
    }
}, false);
</script>