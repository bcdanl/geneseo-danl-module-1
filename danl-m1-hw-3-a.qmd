---
title: Homework 3
subtitle: Pandas Basics - Sorting, Indexing, and Locating Data 
date: 2024-02-20
execute: 
  echo: true
  eval: true
  warning: false
  message: false
from: markdown+emoji
comments: false
---

```{r}
#| include: false

library(tidyverse)
library(DT)

reticulate::use_condaenv("/Users/bchoe/anaconda3", required = TRUE)
```


# Direction


- Please submit your Jupyter Notebook for Homework 3 to the Brightspace with the name below:

  - `danl-m1-hw3-LASTNAME-FIRSTNAME.ipynb`\
  ( e.g., `danl-m1-hw3-choe-byeonghak.ipynb` )

- The due is February 27, 2024, 7:00 P.M.

- Please send Byeong-Hak an email (`bchoe@geneseo.edu`) if you have any questions.

-   Please prepare a Jupyter/Python Notebook (`*.ipynb`) to address all questions.

-   Make at least some simple comment (`# ...`) in each question.

-   Make one text cell to explain things in each question.

# Load Libraries

Import the `pandas` library.

```{python}
#| echo: true
import pandas as pd
from itables import init_notebook_mode
from itables import show
```

Below is `nyc_payroll` `DataFrame` that reads the file `nyc_payroll.csv` containing data of how the New York City’s budget is being spent on salary and overtime pay for all municipal employees (Source: [NYC OpenData](https://data.cityofnewyork.us/City-Government/Citywide-Payroll-Data-Fiscal-Year-/k397-673e/about_data)).

```{python}
#| echo: true
nyc_payroll = pd.read_csv('https://bcdanl.github.io/data/nyc_payroll_2022_2023.csv')
```

<div style="position: relative;">
  <button onclick="scrollTable(-200)" style="position: absolute; z-index: 1000; top: 0; left: 70px; border: 1px solid grey; width: 25px; height: 41px; background-color: #ededed;">←</button>
  <button onclick="scrollTable(200)" style="position: absolute; z-index: 1000; top: 0; left: 95px; border: 1px solid grey; width: 25px; height: 41px; background-color: #ededed;">→</button>
</div>


<script>
function scrollTable(offset) {
  // Ensure we're targeting the scroll body of the DataTable specifically
  var scrollBody = $('#exampleTable .dataTables_scrollBody');
  
  // Check if the scrollBody is found
  console.log(scrollBody.length); // For debugging, should be 1 if found
  
  scrollBody.animate({
    scrollLeft: '+=' + offset
  }, 'fast');
}
</script>


```{r}
#| eval: true
#| echo: false
DT:::datatable(readr::read_csv('https://bcdanl.github.io/data/nyc_payroll_2022_2023.csv'), 
          extensions = c('Buttons','FixedColumns'),
          options = list(
            dom = 'Bfrtip',
            buttons = c('csv'),
            scrollX = TRUE,
            fixedColumns = list(leftColumns = 2)
            ), 
          elementId = "exampleTable"
          )
```

## Variable Description
- `Fiscal Year`: Fiscal Year;
- `Payroll Number`:	Payroll Number;
- `Agency Name`: The Payroll agency that the employee works for;
- `Last Name`: Last name of employee;
- `First Name`: First name of employee;
- `Mid Init`: Middle initial of employee;
- `Agency Start Date`: Date which employee began working for their current agency;
- `Work Location Borough`: Borough of employee's primary work location;
- `Title Description`: Civil service title description of the employee;
- `Leave Status as of June 30`: Status of employee as of the close of the relevant fiscal year;
- `Base Salary`: Base Salary assigned to the employee;
- `Pay Basis`: Lists whether the employee is paid on an hourly, per diem or annual basis;
- `Regular Hours`: Number of regular hours employee worked in the fiscal year;
- `Regular Gross Paid`: The amount paid to the employee for base salary during the fiscal year;
- `OT Hours`: Overtime Hours worked by employee in the fiscal year;
- `Total OT Paid`: Total overtime pay paid to the employee in the fiscal year;
- `Total Other Pay`: Includes any compensation in addition to gross salary and overtime pay, ie Differentials, lump sums, uniform allowance, meal allowance, retroactive pay increases, settlement amounts, and bonus pay, if applicable.
<br><br>

## Question 1
Select "First Name", "Last Name", "Base Salary", and "Total OT Paid", then sort these selected variables by "Base Salary" in descending order and display the top 10 entries.



*Answer*

```{python}
selected_sorted = (   # To select "First Name", "Last Name", "Base Salary", and "Total OT Paid":
    nyc_payroll[ ["First Name", "Last Name", "Base Salary", "Total OT Paid"] ]

    # To sort the observations by "Base Salary" in descending order:
    .sort_values("Base Salary", ascending = False)

    # To display the top 10 entries:
    .head(10)
)


# Below is without the comments
selected_sorted = (   
    nyc_payroll[ ["First Name", "Last Name", "Base Salary", "Total OT Paid"] ]
    .sort_values("Base Salary", ascending = False)
    .head(10)
)


# Below is another one with nlargest():

selected_sorted = (
    nyc_payroll[ ["First Name", "Last Name", "Base Salary", "Total OT Paid"] ]
    .nlargest(10, "Base Salary", keep = "all")
)

```

```{python}
#| eval: false
selected_sorted
```

```{python}
#| echo: false
show(selected_sorted)
```


<br><br>


## Question 2
Create a new DataFrame that includes employees from the "DEPARTMENT OF EDUCATION ADMIN" agency where the variables are "First Name", "Last Name", "Title Description", "Base Salary", and "Total OT Paid". Additionally, include a new variable "Total Compensation" which is the sum of "Base Salary" and "Total OT Paid".



*Answer*
```{python}
# (1) Using set_index() and .loc[]
edu_admin_df = (
    nyc_payroll
    # To set "Agency Name" as an index label
    .set_index("Agency Name")     

    # To locate observations with index labels of 'DEPARTMENT OF EDUCATION ADMIN'
    .loc['DEPARTMENT OF EDUCATION ADMIN']     

    # To select variables
    [['First Name', 'Last Name', 'Title Description', 'Base Salary', 'Total OT Paid']]    
)

# (2) Traditional filtering
edu_admin = nyc_payroll['Agency Name'] == 'DEPARTMENT OF EDUCATION ADMIN'

edu_admin_df = (
    nyc_payroll[ edu_admin ]
     [['Agency Name', 'First Name', 'Last Name', 'Title Description', 'Base Salary', 'Total OT Paid']]
)

# (3) query() filtering
edu_admin_df = (
    nyc_payroll.query("`Agency Name` == 'DEPARTMENT OF EDUCATION ADMIN'")
    [['Agency Name', 'First Name', 'Last Name', 'Title Description', 'Base Salary', 'Total OT Paid']]
)

# To add a new variable, 'Total Compensation':
edu_admin_df['Total Compensation'] = edu_admin_df['Base Salary'] + edu_admin_df['Total OT Paid']
```

```{python}
#| eval: false
edu_admin_df
```

```{python}
#| echo: false
show(edu_admin_df)
```


<br><br>

## Question 3
Using `set_index()`, change the DataFrame's index to "Last Name", then locate the data for a specific last name, say "BROWN", and display their "Agency Name", "Base Salary", and "Total OT Paid".



*Answer*
```{python}
brown = (
    nyc_payroll
    .set_index('Last Name')
    .loc['BROWN', ['Agency Name', 'Base Salary', 'Total OT Paid']]
)

```

```{python}
#| eval: false
brown
```

```{python}
#| echo: false
show(brown)
```


<br><br>


## Question 4
Find the 5 employees with the highest "Regular Gross Paid" and calculate their average "OT Hours". Also, reset the index if you have changed it previously.



*Answer*
```{python}
top_5_gross = nyc_payroll.nlargest(5, 'Regular Gross Paid', keep = "all")
top_5_gross
```

```{python}
#| eval: false
top_5_gross
```

```{python}
#| echo: false
show(top_5_gross)
```

```{r}
# To calculate the mean 'OT Hours'
average_ot_hours = top_5_gross['OT Hours'].mean()
average_ot_hours
```


<br><br>




## Question 5
Sort the DataFrame by "Fiscal Year" and "Total Other Pay" in descending order, then set "First Name" as the index and use the loc accessor to retrieve the "Total Other Pay" for a specific first name, say "MICHAEL".




*Answer*
```{python}
# Sorting with multiple variables
sorted_data = nyc_payroll.sort_values(['Fiscal Year', 'Total Other Pay'], 
                                      ascending = [True, False])
sorted_data.set_index('First Name', inplace=True)

# Locating values (filtering observations and selecting variables)
johns_pay = sorted_data.loc['MICHAEL', ['Total Other Pay'] ]  # Using a list for variable seelction
johns_pay.reset_index(inplace=True)  # Resetting index if "First Name" is needed later
```

```{python}
#| eval: false
johns_pay
```

```{python}
#| echo: false
show(johns_pay)
```

<br><br>


## Question 6
- Select employees who have "OT Hours" greater than 0, calculate their "OT Rate" (Total OT Paid / OT Hours), and then find the employee with the highest "OT Rate". Display their full name and OT Rate.
  -  Hint: Start with filtering observations in `nyc_payroll` with the following lines:
  
```{python}
#| echo: true

# Boolean Series of whether or not 'OT Hours' is greater than 0.
pos_OT_hours = nyc_payroll['OT Hours'] > 0 

# Keeping only the observations with pos_OT_hours == True
with_ot = nyc_payroll[ pos_OT_hours ] 
```


*Answer*
```{python}

highest_ot_rate = (
  with_ot.nlargest(1, 'OT Rate')
  [ ['First Name', 'Last Name', 'OT Rate'] ]
)
```

```{python}
#| eval: false
highest_ot_rate
```

```{python}
#| echo: false
show(highest_ot_rate)
```

<br><br>




## Question 7
Sort the DataFrame first by "Work Location Borough" alphabetically, and then by "Total Compensation" (sum of "Base Salary" and "Total OT Paid") in descending order within each borough.


*Answer*
```{python}
# Adding a new variable, 'Total Compensation', to the DataFrame, nyc_payroll
nyc_payroll['Total Compensation'] = nyc_payroll['Base Salary'] + nyc_payroll['Total OT Paid']

# Sorting by multiple variables
sorted_df = nyc_payroll.sort_values(['Work Location Borough', 'Total Compensation'], ascending=[True, False])
```

```{python}
#| eval: false
sorted_df
```

```{python}
#| echo: false
show(sorted_df)
```


<br><br>


